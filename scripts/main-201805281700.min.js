var remoteURL = 'https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/'; var defaultMapZoom = 2; var defaultMapCenter = {lat: - 28.024, lng:140.887}; var currentInfoWindow = null; var infoWindowMaxWidth = 675; var markerClusterer = null; var mapOptions = {zoom:defaultMapZoom, center:defaultMapCenter, scaleControl:!0, mapTypeControl:!0, fullscreenControl:!0, }; var map = new google.maps.Map(document.getElementById('earthquake-map'), mapOptions); var geocoder = new google.maps.Geocoder(); var markers = []; var timezones = moment.tz.names(); var locales = moment.locales(); var currentTimezone = moment.tz.guess(); var currentLocale = 'en-au'; var currentLocation = ''; var currentLocationMarker = null; var selectedRadius = ''; var currentLocationCircle = null; jQuery(function($){$(window).on('resize', function(){var infoWindowPadding = 20; if ($(window).width() <= 568){mapOptions.mapTypeControl = !1; infoWindowPadding = 10} else{mapOptions.mapTypeControl = !0}
if ($(window).width() < 992){mapOptions.fullscreenControl = !1} else{mapOptions.fullscreenControl = !0}
infoWindowMaxWidth = $('#earthquake-map').innerWidth() - infoWindowPadding * 2 - 53; if (currentInfoWindow){currentInfoWindow.setOptions({maxWidth:infoWindowMaxWidth, })}
map.setOptions(mapOptions)}).trigger('resize'); $("#scroll-down-button a[href^='#']").on('click', function(e){e.preventDefault(); $('html, body').animate({scrollTop:$($(this).attr('href')).offset().top}, 500, 'linear')}); $('#form-timezone-locale').on('submit', function(e){e.preventDefault()}); $('#btn-update-map').on('click', function(){$('#loader-wrapper').removeClass('hidden'); $('#loader-message').text('Initialising...'); $('#messages').empty(); $('#btn-back-to-map').trigger('click'); resetTimezoneAndLocale(); resetLocation(resetMap); $('#earthquake-details').empty()}).trigger('click'); $('#btn-back-to-map').on('click', function(){if ($(window).width() < 992){$('html, body').animate({scrollTop:0, })}})}); function resetTimezoneAndLocale(){var $ = jQuery; var timezoneOptions = ''; var localeOptions = ''; $('#loader-message').text('Setting up your timezone & locale...'); currentTimezone = $('#timezone-selector').val()?$('#timezone-selector').val():currentTimezone; for (var i = 0; i < timezones.length; i++){timezoneOptions += '<option value="' + timezones[i] + '"' + (timezones[i] === currentTimezone?' selected':'') + '>' + timezones[i] + '</option>'}
$('#timezone-selector').empty().html(timezoneOptions); currentLocale = $('#locale-selector').val()?$('#locale-selector').val():currentLocale; for (var i = 0; i < locales.length; i++){localeOptions += '<option value="' + locales[i] + '"' + (locales[i] === currentLocale?' selected':'') + '>' + locales[i] + '</option>'}
$('#locale-selector').empty().html(localeOptions); moment.tz.setDefault(currentTimezone).locale(currentLocale)}
function resetLocation(callback){var $ = jQuery; selectedRadius = $('#radius-selector').val(); $('#loader-message').text('Determining your location...'); if (currentLocationCircle){currentLocationCircle.setMap(null)}
var tempLocation = $('#my-location').val().trim(); if (tempLocation){var tempCoordinate = tempLocation.split(tempLocation.includes(', ')?', ':','); if (isValidCoordinate(tempCoordinate)){currentLocation = new google.maps.LatLng(tempCoordinate[0], tempCoordinate[1]); $('#my-location').val(tempCoordinate[0] + ', ' + tempCoordinate[1]); resetPositionMarker(); if (callback){callback()}} else{geocoder.geocode({'address':tempLocation, }, function(geocoderResult, geoStatus){if (geoStatus === google.maps.GeocoderStatus.OK){currentLocation = geocoderResult[0].geometry.location; $('#my-location').val(geocoderResult[0].formatted_address); resetPositionMarker(); if (callback){callback()}} else{displayLocationError({code:1001, message:"Geocode was not successful for the following reason: " + geoStatus, })}})}} else{if (navigator.geolocation){var positionOptions = {enableHighAccuracy:!0, timeout:10000, maximumAge:300000, }; navigator.geolocation.getCurrentPosition(function(position){currentLocation = new google.maps.LatLng(position.coords.latitude, position.coords.longitude); $('#my-location').val(position.coords.latitude + ', ' + position.coords.longitude); resetPositionMarker(); if (callback){callback()}}, displayLocationError, positionOptions)} else{displayLocationError({code:1002, message:"Your browser doesn't support location auto detection.", })}}}
function resetMap(){var $ = jQuery; $('#loader-message').text('Retrieving the earthquake data...'); if (currentInfoWindow){currentInfoWindow.close()}
$.ajax({url:remoteURL + $('#feed-selector').val(), dataType:'json', }).fail(function(){displayMessages([{message:'An error occurred. It is most likely that the server of USGS\'s Earthquake Hazards Program is not available at the moment.'}]); hideLoader()}).done(function(data){if (!isRawDataValid(data)){displayMessages([{message:'An error occurred. The returned data from the server of USGS\'s Earthquake Hazards Program is invalid.'}]); hideLoader()} else{markers = getMarkers(data.features); markerClusterer = getMarkerCluster(markers); var selectedFeed = $('#feed-selector > option:selected').text().toLowerCase(); displayMessages([{message:markers.length + (selectedFeed.includes('significant')?' significant':'') + " earthquake(s) detected in the selected area " + selectedFeed.replace(' (significant)', '') + ".", type:'info'}])}})}
function resetPositionMarker(){var $ = jQuery; var markerOptions = {position:currentLocation, map:map, infoWindow:null, zIndex:2147483647, icon:{path:google.maps.SymbolPath.CIRCLE, strokeWeight:2, strokeColor:'#FFF', fillColor:'#00F', fillOpacity:1, scale:6, }, }; $('#loader-message').text('Dropping your location marker...'); if (currentLocationMarker){currentLocationMarker.setOptions(markerOptions)} else{currentLocationMarker = new google.maps.Marker(markerOptions)}
if (selectedRadius){var circleOptions = {map:map, center:currentLocation, radius:selectedRadius * 1000, strokeWeight:1, fillColor:'#00F', fillOpacity:0.1, }; if (currentLocationCircle){currentLocationCircle.setOptions(circleOptions)} else{currentLocationCircle = new google.maps.Circle(circleOptions)}}
mapOptions.center = currentLocation; mapOptions.zoom = determineMapZoom(); map.setOptions(mapOptions)}
function isValidCoordinate(coordinate){var result = !1; if (coordinate && Array.isArray(coordinate) && coordinate.length == 2 && !isNaN(coordinate[0]) && coordinate[0] >= - 90 && coordinate[0] <= 90 && !isNaN(coordinate[1]) && coordinate[1] >= - 180 && coordinate[1] <= 180){result = !0}
return result}
function displayLocationError(error){var message = 'Error: '; switch (error.code){case error.PERMISSION_DENIED:message += "The Geolocation request can't be fulfilled through an insecure connection (e.g., non-HTTPS) or you denied the Geolocation request."; break; case error.POSITION_UNAVAILABLE:message += "Location information is unavailable."; break; case error.TIMEOUT:message += "The request to get user location timed out."; break; case error.UNKNOWN_ERROR:message += "An unknown error occurred."; break; default:message += error.message}
displayMessages([{message:message, }, ]); hideLoader()}
function displayMessages(messages){var $ = jQuery; var messageList = '<ul>'; if (messages.length && messages[0].message.trim()){for (var i = 0; i < messages.length; i++){var message = messages[i].message; var messageType = messages[i].type; if (message){switch (messageType){case 'muted':messageType = 'text-muted'; break; case 'primary':messageType = 'text-primary'; break; case 'success':messageType = 'text-success'; break; case 'info':messageType = 'text-info'; break; case 'warning':messageType = 'text-warning'; break; case 'danger':default:messageType = 'text-danger'}
messageList += '<li class="' + messageType + '">' + message + '</li>'}}
messageList += '</ul>'; $('#messages').html(messageList)}}
function hideLoader(){var $ = jQuery; $('#loader-wrapper').addClass('hidden'); $('#loader-message').text('')}
function determineMapZoom(){var result = defaultMapZoom; switch (parseInt(selectedRadius)){case 50:result = 9; break; case 100:result = 8; break; case 200:result = 7; break; case 500:result = 6; break; case 1000:result = 5; break; case 2000:result = 4; break; case 5000:result = 3; break}
return result}
function isRawDataValid(rawData){return typeof rawData.metadata.status !== 'undefined' && rawData.metadata.status === 200 && typeof rawData.features !== 'undefined' || rawData.features.constructor === Array}
function getMarkers(rawLocationData){var $ = jQuery; var result = []; $('#loader-message').text('Dropping earthquake markers...'); if (rawLocationData && rawLocationData.constructor === Array && rawLocationData.length){var j = 0; for (i = 0; i < rawLocationData.length; i++){var location = rawLocationData[i]; var latLng = new google.maps.LatLng(location.geometry.coordinates[1], location.geometry.coordinates[0]); if (selectedRadius == '' || Math.ceil(google.maps.geometry.spherical.computeDistanceBetween(currentLocation, latLng) / 1000) <= selectedRadius){var locationTime = moment(location.properties.time); var markerContent = '<h3 class="google-map-marker-title">' + location.properties.place + '</h3>'; markerContent += '<div class="google-map-marker-content">'; markerContent += '<p><strong>Time:</strong> ' + locationTime.format('LLLL Z') + '</p>'; markerContent += '<p><strong>Latitude:</strong> ' + location.geometry.coordinates[1] + '<br><strong>Longitude:</strong> ' + location.geometry.coordinates[0] + '<br><strong>Depth:</strong> ' + location.geometry.coordinates[2] + ' km</p>'; markerContent += '<p><strong>Magnitude:</strong> ' + location.properties.mag + '</p>'; markerContent += '</div><\!-- .google-map-marker-content --\>'; markerContent += '<div class="google-map-marker-content-more"><p class="buttons"><button id="show-details-' + j + '" class="btn btn-default">Show Details</button><button id="set-as-my-location-' + j + '" class="btn btn-default" data-marker-index="' + j + '">Set as My Location</button></p></div>'; var infoWindow = new google.maps.InfoWindow({content:markerContent, maxWidth:247, }); var marker = new google.maps.Marker({position:latLng, map:map, infoWindow:infoWindow, rawData:location, }); google.maps.event.addListener(marker, 'click', getMarkerClickListener(marker, j)); result.push(marker); j++}}}
return result}
function getMarkerClickListener(thisMarker, markerIndex){var $ = jQuery; return function(){$('#earthquake-details').empty(); if (currentInfoWindow){currentInfoWindow.close()}
thisMarker.infoWindow.setOptions({maxWidth:infoWindowMaxWidth, }); thisMarker.infoWindow.open(map, thisMarker); currentInfoWindow = thisMarker.infoWindow; $('.google-map-marker-content-more #show-details-' + markerIndex).on('click', function(){$('#earthquake-details').html('<h4>Earthquake Detail:</h4><div class="pre">' + JSON.stringify(thisMarker.rawData, null, 2) + '</div>'); if ($(window).width() < 992){$('html, body').animate({scrollTop:$('#earthquake-details').offset().top, })}}); $('.google-map-marker-content-more #set-as-my-location-' + markerIndex).on('click', function(){$('#my-location').val(thisMarker.position.lat() + ', ' + thisMarker.position.lng()); if ($(window).width() < 992){$('html, body').animate({scrollTop:$('#form-timezone-locale').offset().top, })}})}}
function getMarkerCluster(markers){var $ = jQuery; var result = null; $('#loader-message').text('Grouping earthquake markers...'); if (markerClusterer){markerClusterer.clearMarkers(); markerClusterer.addMarkers(markers); result = markerClusterer} else{result = new MarkerClusterer(map, markers, {imagePath:'https://cdn.jsdelivr.net/npm/gmaps-marker-clusterer@1.2.2/images/m', })}
hideLoader(); return result}
function logMessage(message){if (typeof window.console !== 'undefined' && typeof window.console.log !== 'undefined'){window.console.log(message)}}